@page "/login/"
@inject UsuarioService UsuarioService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Login - Cifralite</PageTitle>

<link rel="stylesheet" href="InterfaceDeCadastroELogin.css">

<div id="TelaDeLogin">
    <h1>Fazer Login</h1>
    <p>Bem-vindo ao <strong>Cifralite!</strong></p>

    <EditForm Model="usuario" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
        <div id="Formulario">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <InputText id="Email" class="campoDeLogin" @bind-Value="usuario.Email" type="email" placeholder="E-mail" />
            <InputText id="Senha" class="campoDeLogin" @bind-Value="usuario.Senha" type="password" placeholder="Senha" />
            <button type="submit" id="BotaoEntrar">Entrar</button>
            <a href="#">Esqueci minha senha</a>
        </div>
        @if (mensagemDeErro != string.Empty) {
            <div id="MenssagemDeErro">
                <p>@mensagemDeErro</p>
            </div>
        }
    </EditForm>
</div>

@code {
    private LoginModel usuario = new LoginModel();
    public string mensagemDeErro {get;set;} = string.Empty;
    private async Task HandleValidSubmit() {
        mensagemDeErro = string.Empty;
        var requerimento = await UsuarioService.Login(usuario.Email, usuario.Senha);
        if (requerimento) {
            NavigationManager.NavigateTo("/");
        } else {
            mensagemDeErro = "O campo E-mail ou Senha é inválido";
        }
        Console.WriteLine("É nois");
    }
    private void HandleInvalidSubmit() {
        Console.WriteLine("Não É nois");
    }

    private class LoginModel {
        [Required(ErrorMessage = "O E-mail é obrigatório")]
        public string Email {get;set;} = string.Empty;
        [Required(ErrorMessage = "A senha é obrigatória")]
        public string Senha {get;set;} = string.Empty;
    }
}