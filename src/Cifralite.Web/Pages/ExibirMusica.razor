@page "/musicas/{id:int}"
@inject NavigationManager NavigationManager
@inject MusicaService MusicaService

<NavBar />
<div id=main>
    @* <BarraDeBusca Titulo="Barra De Pesquisa de Musica"></BarraDeBusca> *@

    <section id="infoMusicas">
        <div id="nomeMusica" class="blocoMusica">
            <span id="titulo">@Musica.Titulo</span>
        </div>
        <div class="tomMusica">
            <span id="tom" class="blocoMusica">@Musica.Tom</span>
            <div class="responsivoAumentarDiminuir">
                <button id="aumentarTom" class="blocoMusica" @onclick="SubirMeioTom">+</button>
                <button id="diminuirTom" class="blocoMusica" @onclick="BaixarMeioTom">-</button>
            </div>
        </div>
        <div class="blocoMusica" id="blocoLixeira">
            @* <img src="fotos/iconLixeixa.png" alt="icone lixeira" id="iconLixeira"> *@
            <span>@(id)</span>
            <ModalDeDeletarMusica IdMusica="@(id)" />
        </div>
        <div class="blocoMusica" id="blocoEditarMusica">
            <ModalAtualizarMusica Musica="@Musica" />
        </div>
    </section>

    @foreach (var secao in Musica.Secoes)
    {
        <div class="secoes">
            <section>
                <p id="TituloSecao">@secao.Titulo</p>

                @foreach (var grupoDeAcorde in AgruparAcordes(secao.Acordes))
                {
                    <div class="Acordes">
                        @foreach (var acorde in grupoDeAcorde)
                        {
                            <section class="notasContruidas" style="margin-top: 20px;">
                                <div class="tempo">@(ConstruirTempoEmTexto(acorde))</div>
                                <div class="notas">@(ConstruirNotaEmTexto(acorde))</div>
                            </section>
                        }
                    </div>
                }
            </section>
        </div>
    }
</div>

@code {

    [Parameter]
    public int id { get; set; }

    private List<Musica> musicas = new List<Musica>();

    private Musica Musica { get; set; } = new Musica();

    protected override void OnInitialized()
    {
        var musica = MusicaService.ObterMusicaPeloId(id);
        if (musica is null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        Musica = musica;
    }

    private string ConstruirNotaEmTexto(Acorde acorde)
    {
        if (string.IsNullOrEmpty(acorde.Baixo))
        {
            return $"{acorde.Nota}{acorde.Complemento}";
        }

        return $"{acorde.Nota}{acorde.Complemento}/{acorde.Baixo}";
    }

    private string ConstruirTempoEmTexto(Acorde acorde)
    {
        int acordeTempoInt = acorde.Tempo;
        string acordeTempoString = acordeTempoInt.ToString();
        return acordeTempoString;
    }

    private void SubirMeioTom()
    {
        Musica.SubirMeioTom();
    }

    private void BaixarMeioTom()
    {
        Musica.DescerMeioTom();
    }

    public List<List<Acorde>> AgruparAcordes(List<Acorde> acordes)
    {
        return acordes
        .Select((acorde, index) => new { acorde, index })
        .GroupBy(x => x.index / 4)
        .Select(g => g.Select(x => x.acorde).ToList())
        .ToList();
    }
}